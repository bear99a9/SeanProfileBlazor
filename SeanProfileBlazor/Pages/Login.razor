@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService localStorage;

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" placeholder="Email" @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(() => user.Email)" />
     </div>
         <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" placeholder="Password" @bind-Value="user.Password" class="form-control" />
        <ValidationMessage For="@(() => user.Password)" />
     </div>
     <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<div class ="text-danger">
    <span>@errorMessage</span>
</div>


@code {

    private string returnUrl = string.Empty;
    
    private UserLogin user = new UserLogin();   

    private string errorMessage = string.Empty;
    
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var returnUrl))
        {
            this.returnUrl = returnUrl;
        }
    }

    
    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        
        if (result.Success)
        {
            errorMessage = string.Empty;
            
            await localStorage.SetItemAsync("authToken", result.Data);
            
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
