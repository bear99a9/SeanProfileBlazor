@inject HttpClient Http
@inject IBlogService BlogService
@page "/file-upload"
@using System.Linq
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.Extensions.Logging

<h1>@message</h1>

<div class="input-group">
    <div class="custom-file">
        <InputFile class="custom-file-input" multiple OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile" />
        <label class="custom-file-label" for="inputFile">Choose file</label>
    </div>
    <div class="input-group-append">
        <button class="btn btn-success" @onclick="Upload" disabled="@isDisabled">Upload</button>
    </div>
</div>

@foreach (var file in filesBase64)
{
    <img src="data:@file.contentType;base64,@file.base64data" />
}

<div>
    <h1>Uploaded Images</h1>
</div>
@foreach (var img in blogModels)
{
    <img src=@img.Image.Url alt="your loaded image" />
}


@code {
    List<BlogModel> blogModels = new List<BlogModel>();
    List<ImageFile> filesBase64 = new List<ImageFile>();
    private List<IBrowserFile> _browserFiles = new();

    string message = "InputFile";
    bool isDisabled = false;
    long maxFileSize = 512000;

    async Task OnChange(InputFileChangeEventArgs e)
    {

        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            filesBase64.Add(new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name }); // convert to a base64 string!!

            _browserFiles.Add(file);
        }

        message = "Click UPLOAD to continue";

        isDisabled = false;

        StateHasChanged();
    }

    async Task Upload()
    {
        using var content = new MultipartFormDataContent();

        foreach (var file in _browserFiles)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file

            var fileContent = new StreamContent(resizedFile.OpenReadStream(maxFileSize));

            fileContent.Headers.ContentType =
                new MediaTypeHeaderValue(resizedFile.ContentType);

            content.Add(content: fileContent,
                name: "\"files\"",
                fileName: resizedFile.Name);
        }

        var response = await BlogService.SaveFile(content);

        blogModels.AddRange(response);

        filesBase64 = new();
        _browserFiles = new();
        isDisabled = true;
    }

}